using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OverSurgery
{
    class DatabaseConnection
    {
        #region ATTRIBUTES 
        // Creates an instance of the DatabaseConnection class.
        private static DatabaseConnection _instance;
        
        // Database connection string.
        private static string connectionStr;
        public static string ConnectionStr
        {
            set
            {
                connectionStr = value;
            }
        }


        // The SqlCconnection object used to store the connection to
        // the database.
        private SqlConnection connectionToDB;

        // The DataAdapter object used to open a table of the 
        // database.
        private SqlDataAdapter dataAdapter;

       
        #endregion

        #region METHODS

        public static DatabaseConnection getDatabaseConnectionInstance()
        {
            if (_instance == null)     
                _instance = new DatabaseConnection();
            
            return _instance;
        }

        /// <summary>
        /// Open the connection.
        /// </summary>
        public void openConnection()
        {
            // Create the connection to the database as an instance of 
            // System.Data.SqlClient.SqlConnection.
            connectionToDB = new SqlConnection(connectionStr);

            // Opens the connection
            connectionToDB.Open();
        }

        /// <summary>
        /// Get the data set generated by the SQL statement.
        /// </summary>
        /// <param name="SqlStatement"></param>
        /// <returns>Returns the data set.</returns>
        public DataSet getDataSet(string SqlStatement)
        {
            DataSet dataSet = new DataSet();

            // Opens connection.
            openConnection();

            // Create the object dataAdapter to manipulate a table from the
            // database SurgeryDatabase specified by connectionToDB.
            dataAdapter = new SqlDataAdapter(SqlStatement, connectionToDB);

            // Fills in the data set.
            dataAdapter.Fill(dataSet);

            // Closes the connection.
            closeConnection();

            // Return the dataset.
            return dataSet;
        }
        public void AddShift(string StartDate, string StartTime, string EndTime, int StaffID, string AppointmentID)
        {
            connectionToDB.Open();

            SqlCommand cmd = connectionToDB.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = Constants.AddShift(StartDate, StartTime, EndTime, StaffID, AppointmentID);
            cmd.ExecuteNonQuery();
            connectionToDB.Close();
        }

        public void UpdateShift(string StartDate, string StartTime, string EndTime, int StaffID, string AppointmentID)
        {
            connectionToDB.Open();
            SqlCommand cmd = connectionToDB.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = Constants.UpdateShift(StartDate, StartTime, EndTime, StaffID, AppointmentID);
            cmd.ExecuteNonQuery();

            connectionToDB.Close();
        }

        public string GetStaffID(string FirstName, string LastName)
        {
            connectionToDB.Open();

            SqlCommand cmd = connectionToDB.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = Constants.GetStaffID(FirstName, LastName);
            cmd.ExecuteNonQuery();
            string str = Convert.ToString(cmd.ExecuteScalar());
            connectionToDB.Close();

            return str;
        }
        public int CheckStaffBusy(int StaffID, string Date, string Time)
        {
            int i = 0;
            string StaffString = Convert.ToString(StaffID);
            DataSet dsStaff = DatabaseConnection.getDatabaseConnectionInstance().getDataSet(Constants.SpecificStaffMember(StaffString, Date, Time));

            //get the table to be displayed from the data set
            DataTable dtShift = dsStaff.Tables[0];

            i = Convert.ToInt32(dtShift.Rows.Count.ToString());
            return i;
        }

        public int GetIntValue(String sqlStatement)
        {
            connectionToDB.Open();

            SqlCommand cmd = connectionToDB.CreateCommand();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = sqlStatement;
            cmd.ExecuteNonQuery();
            int value = Convert.ToInt32(cmd.ExecuteScalar());
            connectionToDB.Close();

            return value;
        }

        /// <summary>
        /// Close the connection.
        /// </summary>
        public void closeConnection()
        {
            // Closes the connection to the database.
            connectionToDB.Close();
        }

        #endregion

        #region CONSTRUCTORS
        #endregion
    }
}
